 # include "seqlist.h"


void  SeqlistInit(SL* ps)
{
	ps->a = NULL;
	ps->size = ps->capcity = 0;
}
void SeqListPushBack(SL* ps, SLDataType x)
{
	//�ռ䲻�㹻
	if (ps->size == ps->capcity)
	{
		int  newcapcity = ps->capcity == 0 ? 4 : 2;
		SLDataType* tmp = (int*)realloc(ps->a, sizeof(SLDataType) * newcapcity);
		if (tmp == NULL)
		{
			perror("SeqlistPushBack");
			exit(-1);
		}

		ps->a = tmp;
		ps->capcity = newcapcity;


	}
	//�ռ��㹻
	ps->a[ps->size] = x;
	ps->size++;

}
void SeqlistPrint(SL *ps)
{
	int i;
	for (i = 0;i< ps->size; i++)
	{
		printf("%d\n", ps->a[i]);
	}
}
void SeqListPopBack(SL* ps)
{
	assert(ps->size > 0);
	ps->size--;
}

void SeqListDestory(SL* ps)
{
	free(ps->a);
	ps->a == NULL;
	ps->size = ps->capcity = 0;

}
void SeqlistCheckCapicity(SL* ps)
{
	if (ps->size == ps->capcity)
	{
		int newcapicity = ps->capcity == 0 ? 4 : 2;
		SLDataType* tmp = (int*)realloc(ps->a, sizeof(SLDataType) * newcapicity);
		if (tmp == NULL)
		{
			printf("����ʧ��");
			exit(-1);
		}
		ps->a = tmp;
		ps->capcity = newcapicity;
	}



}


void SeqListPushFront(SL* ps,SLDataType x)
{
	SeqListCheckCapicity(ps->a);

	int end = ps->size - 1;

	while (end >= 0)
	{
		ps->a[end + 1] = ps->a[end];
		end--;
	}
	ps->a[0] = x;
	ps->size++;


}
void SeqListPopFront(SL* ps)
{
	assert(ps->size >= 0);
	int begin = 1;
	while (begin < ps ->size)
	{
		ps->a[begin - 1] = ps->a[begin];
		begin++;

	}
	ps->size--;
}
void SeqlistFind(SL* ps,SLDataType x)
{
	int i = 0;
	for (i = 0; i < ps->size; i++)
	{
		if (ps->a[i] == x)
			return i;
	}
	return -1;
}


void SeqListInsert(SL* ps, int pos, SLDataType x)
{
	assert(pos >= 0 && pos <= ps->size);
	SeqListCheckCapicity(ps);
	int end = ps->size - 1;
	while (pos <= end)
	{
		ps->a[end + 1] = ps->a[end];
		end--;
	}
	ps->a[pos] = x;
	ps->size++;
}

void SeqListEarse(SL* ps, int pos)
{
	assert(pos >= 0 && pos <= ps->size);
	int  begin = pos;
	while (begin+1< ps->size)
	{
		ps->a[begin] = ps->a[begin+1];
		begin++;
	}
	ps->size--;

	}
